// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/thomas-marquis/genkit-mistral/mistralclient (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/client.go github.com/thomas-marquis/genkit-mistral/mistralclient Client
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	mistralclient "github.com/thomas-marquis/genkit-mistral/mistralclient"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ChatCompletion mocks base method.
func (m *MockClient) ChatCompletion(ctx context.Context, messages []mistralclient.Message, model string, cfg *mistralclient.ModelConfig, opts ...mistralclient.ChatCompletionOption) (mistralclient.ChatCompletionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, messages, model, cfg}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChatCompletion", varargs...)
	ret0, _ := ret[0].(mistralclient.ChatCompletionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatCompletion indicates an expected call of ChatCompletion.
func (mr *MockClientMockRecorder) ChatCompletion(ctx, messages, model, cfg any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, messages, model, cfg}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatCompletion", reflect.TypeOf((*MockClient)(nil).ChatCompletion), varargs...)
}

// TextEmbedding mocks base method.
func (m *MockClient) TextEmbedding(ctx context.Context, texts []string, model string) (*mistralclient.EmbeddingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TextEmbedding", ctx, texts, model)
	ret0, _ := ret[0].(*mistralclient.EmbeddingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TextEmbedding indicates an expected call of TextEmbedding.
func (mr *MockClientMockRecorder) TextEmbedding(ctx, texts, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TextEmbedding", reflect.TypeOf((*MockClient)(nil).TextEmbedding), ctx, texts, model)
}
